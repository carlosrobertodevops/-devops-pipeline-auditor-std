services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - dpa_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 10

  api:
    build: ./api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      # Conexão interna com o Postgres do compose
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      DIRECT_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      # Domínios/URLs permitidos para CORS (defina no Coolify)
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: 3001
    command: >
      sh -lc "npx prisma migrate deploy && node dist/main.js"
    expose:
      - "3001"

  web:
    build: ./src
    restart: unless-stopped
    depends_on:
      - api
    environment:
      NODE_ENV: production
      # IMPORTANTE: use a URL pública do serviço da API no Coolify (ex.: https://api.seu-dominio.com)
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
    expose:
      - "3000"

volumes:
  dpa_db_data:
