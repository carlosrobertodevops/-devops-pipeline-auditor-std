generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

model Org {
  id                   String   @id @default(cuid())
  name                 String
  externalId           String   @unique
  apiKey               String?  @unique
  createdAt            DateTime @default(now())
  repos                Repo[]

  // Billing
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?
  plan                 Plan     @default(FREE)
  planStatus           String?
  currentPeriodEnd     DateTime?
}

model Repo {
  id            String     @id @default(cuid())
  orgId         String
  org           Org        @relation(fields: [orgId], references: [id])
  name          String
  fullName      String     @unique
  defaultBranch String
  score         Int?
  workflows     Workflow[]
  scans         Scan[]
  findings      Finding[]
  createdAt     DateTime   @default(now())
}

model Workflow {
  id        String   @id @default(cuid())
  repoId    String
  repo      Repo     @relation(fields: [repoId], references: [id])
  path      String
  sha       String
  raw       String
  createdAt DateTime @default(now())
}

model Scan {
  id         String    @id @default(cuid())
  repoId     String
  repo       Repo      @relation(fields: [repoId], references: [id])
  status     String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  score      Int?
  findings   Finding[]
}

model Finding {
  id         String   @id @default(cuid())
  repoId     String
  repo       Repo     @relation(fields: [repoId], references: [id])
  scanId     String?
  scan       Scan?    @relation(fields: [scanId], references: [id])
  rule       String
  severity   String
  file       String
  line       Int
  suggestion String?
  createdAt  DateTime @default(now())
}
